{
	"info": {
		"_postman_id": "2240519f-5f19-47b7-9be1-a8f584617286",
		"name": "HW_Vadim_Ksendzov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23861047"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "get_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/get_method?name=Tatyana&age=33",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Tatyana"
								},
								{
									"key": "age",
									"value": "33"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Tatyana",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "600",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_1?name=Alex&age=40&weight=75",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "40"
								},
								{
									"key": "weight",
									"value": "75"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_2?name=Julia&age=28&salary=400",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Julia"
								},
								{
									"key": "age",
									"value": "28"
								},
								{
									"key": "salary",
									"value": "400"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_3?name=Natalya&age=35&salary=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Natalya"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Kate&age=39&salary=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Kate"
								},
								{
									"key": "age",
									"value": "39"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Tatyana",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "600",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// n.2 Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// n.3 Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// n.2 Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// n.3 Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// n.4 Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"var resp_name = jsonData.name;\r",
									"pm.test(\"Name in response is equal to name from request(request added manually)\", function () {\r",
									"    pm.expect(resp_name).to.eql('Tatyana');\r",
									"});\r",
									"\r",
									"// n.5 Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"var resp_age = jsonData.age;\r",
									"pm.test(\"Age in response is equal to age from request(request added manually)\", function () {\r",
									"    pm.expect(resp_age).to.eql(\"33\");\r",
									"});\r",
									"\r",
									"// n.6 Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"var resp_salary = jsonData.salary;\r",
									" pm.test(\"Salary in response is equal to salary from request(request added manually)\", function () {\r",
									"    pm.expect(resp_salary).to.eql(600);\r",
									"});\r",
									" \r",
									"//  n.7 Спарсить request.\r",
									" var req = request.data;\r",
									"\r",
									"// n.8 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"\r",
									"var req_name = req.name;\r",
									"pm.test(\"Name in response is equal to name from request\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"\r",
									"// n.9 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"var req_age = req.age;\r",
									"pm.test(\"Age in response is equal to age from request\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"// n.10 Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"var req_salary = +req.salary;\r",
									"pm.test(\"Salary in response is equal to salary from request\", function () {\r",
									"    pm.expect(resp_salary).to.eql(req_salary);\r",
									"});\r",
									"\r",
									"// n.11 Вывести в консоль параметр family из response.\r",
									"var resp_family = jsonData.family;\r",
									"console.log(\"Resp_family = \", resp_family);\r",
									"\r",
									"// n.12 Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"var resp_u_salary_1_5_year= jsonData.family.u_salary_1_5_year;\r",
									"pm.test(\"u_salary_1_5_year in response is equal to salary*4 from request\", function () {\r",
									"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary*4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Tatyana",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "600",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// n.2 Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// n.3 Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// n.4 Спарсить request.\r",
									"var req = pm.request.url.query.toObject();\r",
									"\r",
									"// n.5 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"var resp_name = jsonData.name;\r",
									"var req_name = req.name;\r",
									"pm.test(\"Name in response is equal to name from request\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"\r",
									"// n.6 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"var resp_age = jsonData.age;\r",
									"var req_age = req.age;\r",
									"pm.test(\"Age in response is equal to age from request\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"// n.7 Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"var resp_salary = jsonData.salary;\r",
									"var req_salary = +req.salary;\r",
									"pm.test(\"Salary in response is equal to salary from request\", function () {\r",
									"    pm.expect(resp_salary).to.eql(req_salary);\r",
									"});\r",
									"\r",
									"// n.8 Вывести в консоль параметр family из response.\r",
									"var resp_family = jsonData.family;\r",
									"console.log(\"Resp_family = \", resp_family);\r",
									"\r",
									"// n.9 Проверить, что у параметра dog есть параметры name.\r",
									"var resp_dog= jsonData.family.pets.dog;\r",
									"pm.test(\"Dog contains name parameter\", function () {\r",
									"pm.expect(resp_dog).to.have.property(\"name\")\r",
									"});\r",
									"\r",
									"// n.10 Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog contains age parameter\", function () {\r",
									"pm.expect(resp_dog).to.have.property(\"age\")\r",
									"});\r",
									"\r",
									"// n.11 Проверить, что параметр name имеет значение Luky.\r",
									"var resp_dog_name= jsonData.family.pets.dog.name;\r",
									"pm.test(\"Dog name is Luky\", function () {\r",
									"    pm.expect(resp_dog_name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"// n.12 Проверить, что параметр age имеет значение 4.\r",
									"var resp_dog_age= jsonData.family.pets.dog.age;\r",
									"pm.test(\"Dog age is 4\", function () {\r",
									"    pm.expect(resp_dog_age).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_3?name=Ivan&age=50&salary=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Ivan"
								},
								{
									"key": "age",
									"value": "50"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// n.3 Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// n.4 Спарсить request.\r",
									"var req = pm.request.url.query.toObject();\r",
									"\r",
									"// n.5 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"var resp_name = jsonData.name;\r",
									"var req_name = req.name;\r",
									"pm.test (\"Name in response is equal to name from request\", function () {\r",
									"    pm.expect(resp_name).to.eql(req_name);\r",
									"});\r",
									"\r",
									"// n.6 Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"var resp_age = jsonData.age;\r",
									"var req_age = +req.age;\r",
									"pm.test (\"Age in response is equal to age from request\", function() {\r",
									"    pm.expect(resp_age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"// n.7 Вывести в консоль параметр salary из request.\r",
									"var req_salary = +req.salary;\r",
									"console.log (\"Req_salary\", req_salary);\r",
									"\r",
									"// n.8 Вывести в консоль параметр salary из response.\r",
									"var resp_salary = jsonData.salary;\r",
									"console.log (\"Resp_salary = \", resp_salary);\r",
									"\r",
									"// n.9 Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log (\"Resp_salary [0] = \", resp_salary[0]);\r",
									"\r",
									"// n.10 Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log (\"Resp_salary [1] = \", resp_salary[1]);\r",
									"\r",
									"// n.11 Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log (\"Resp_salary [2] = \", resp_salary[2]);\r",
									"\r",
									"// n.12 Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"var resp_salary_zero_value= jsonData.salary[0];\r",
									"pm.test (\"Response salary [0] is equal to salary from request\", function () {\r",
									"    pm.expect(resp_salary_zero_value).to.eql(req_salary);\r",
									"});\r",
									"\r",
									"// n.13 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"var resp_salary_first_value = +jsonData.salary[1];\r",
									"pm.test (\"Response salary [1] is equal to salary*2 from request\", function(){\r",
									"    pm.expect(resp_salary_first_value).to.eql(req_salary*2)\r",
									"});\r",
									"\r",
									"// n.14 Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"var resp_salary_third_value = +jsonData.salary[2];\r",
									"pm.test(\"Response salary [2] is equal to salary*3 from request\", function() {\r",
									"    pm.expect(resp_salary_third_value).to.eql(req_salary*3)\r",
									"});\r",
									"\r",
									"// n.18 Передать в окружение переменную name\r",
									"var name_variable = req.name;\r",
									"pm.environment.set(\"name\", name_variable);\r",
									"\r",
									"// n.19 Передать в окружение переменную age\r",
									"var age_variable = req.age;\r",
									"pm.environment.set(\"age\", age_variable);\r",
									"\r",
									"// n.20 Передать в окружение переменную salary\r",
									"var salary_variable = req.salary;\r",
									"pm.environment.set(\"salary\", salary_variable);\r",
									"\r",
									"// n.21 Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"\r",
									"for (var i of resp_salary){\r",
									"    console.log(i)\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Olga&age=22&salary=400",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Olga"
								},
								{
									"key": "age",
									"value": "22"
								},
								{
									"key": "salary",
									"value": "400"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// n.5 Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// n.6 Спарсить response body в json.\r",
									"var resp = pm.response.json();\r",
									"\r",
									"// n.7 Спарсить request.\r",
									"var req = request.data;\r",
									"\r",
									"// n.8 Проверить, что json response имеет параметр start_qa_salary\r",
									"var resp_start_qa_salary=resp.start_qa_salary;\r",
									"pm.test(\"Response has a start_qa_salary parameter\", function () {\r",
									"    pm.expect(resp).to.have.property(\"start_qa_salary\")\r",
									"});\r",
									"\r",
									"// n.9 Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"var resp_qa_salary_after_6_months=resp.qa_salary_after_6_months;\r",
									"pm.test(\"Response has a qa_salary_after_6_months parameter\", function () {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\")\r",
									"});\r",
									"\r",
									"// n.10 Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"var resp_qa_salary_after_12_months = resp.qa_salary_after_12_months;\r",
									"pm.test(\"Response has a qa_salary_after_12_months parameter\", function() {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\")\r",
									"});\r",
									"\r",
									"// n.11 Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"var resp_qa_salary_after_1_5_year = resp[\"qa_salary_after_1.5_year\"];\r",
									"pm.test(\"Response has a qa_salary_after_1.5_year parameter\", function () {\r",
									"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\")\r",
									"});\r",
									"\r",
									"// n.12 Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"var resp_qa_salary_after_3_5_years = resp[\"qa_salary_after_3.5_years\"];\r",
									"pm.test(\"Response has a qa_salary_after_3.5_years parameter\", function () {\r",
									"   pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
									"});\r",
									"\r",
									"// n.13 Проверить, что json response имеет параметр person\r",
									"var resp_person = resp.person;\r",
									"pm.test(\"Response has a person parameter\", function() {\r",
									"    pm.expect(resp).to.have.property(\"person\")\r",
									"});\r",
									"\r",
									"// n.14 Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"var req_salary = +pm.environment.get(\"salary\");\r",
									"pm.test(\"start_qa_salary in response is equal to salary from request\", function (){\r",
									"    pm.expect(req_salary).to.eql(resp_start_qa_salary)\r",
									"});\r",
									"\r",
									"// n.15 Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"var req_salary_after_6_months = req_salary*2;\r",
									"pm.test(\"qa_salary_after_6_months in response is equal to salary*2 from request\", function (){\r",
									"    pm.expect(req_salary_after_6_months).to.eql(resp_qa_salary_after_6_months)\r",
									"});\r",
									"\r",
									"// n.16 Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"var req_salary_after_12_months = req_salary*2.7;\r",
									"pm.test(\"qa_salary_after_12_months in response is equal to salary*2.7 from request\", function (){\r",
									"    pm.expect(req_salary_after_12_months).to.eql(resp_qa_salary_after_12_months)\r",
									"});\r",
									"\r",
									"// n.17 Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"var req_salary_after_1_5_year = req_salary*3.3;\r",
									"pm.test(\"qa_salary_after_1.5_year in response is equal to salary*3 from request\", function (){\r",
									"    pm.expect(req_salary_after_1_5_year).to.eql(resp_qa_salary_after_1_5_year)\r",
									"});\r",
									"\r",
									"// n.18 Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"var req_salary_after_3_5_years = req_salary*3.8;\r",
									"pm.test(\"qa_salary_after_3.5_years in response is equal to salary*3.8 from request\", function (){\r",
									"    pm.expect(req_salary_after_3_5_years).to.eql(resp_qa_salary_after_3_5_years)\r",
									"});\r",
									"\r",
									"// n.19 Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"var resp_person_u_name_1 = resp.person.u_name[1];\r",
									"pm.test(\"person.u_name [1] in response is equal to salary from request\", function (){\r",
									"    pm.expect(req_salary).to.eql(resp_person_u_name_1)\r",
									"});\r",
									"\r",
									"// n.20 Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
									"var resp_age = resp.person.u_age;\r",
									"var req_age = +pm.environment.get(\"age\");\r",
									"pm.test(\"u_age in response is equal to u_age from request\", function(){\r",
									"    pm.expect(resp_age).to.eql(req_age)\r",
									"});\r",
									"\r",
									"// n.21 Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"var resp_u_salary_5_years = resp.person.u_salary_5_years;\r",
									"var req_salary_4_2 = +pm.environment.get(\"salary\")*4.2;\r",
									"pm.test(\"u_salary_5_years in response is equal to salary*4.2 from request\", function(){\r",
									"    pm.expect(resp_u_salary_5_years).to.eql(req_salary_4_2)\r",
									"});\r",
									"\r",
									"// n.22 Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"var resp_person_entries= Object.entries(resp_person)\r",
									" \r",
									"for ( var [key, value] of resp_person_entries) {\r",
									"    console.log(key, value)\r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_3",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Спарсить response body в json\r",
									"var response = pm.response.json();\r",
									"// Передать в окружение переменную token\r",
									"var resp_token = response.token;\r",
									"pm.environment.set(\"token\", resp_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "{{login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"\r",
									"//Спарсить salary_request\r",
									"var req = JSON.parse(pm.request.body.raw);\r",
									"var req_salary = req.salary;\r",
									"//Спарсить salary_response\r",
									"var resp = pm.response.json();\r",
									"var resp_1_5_year = resp.person.u_salary_1_5_year;\r",
									"var resp_12_months = resp.qa_salary_after_12_months;\r",
									"var resp_6_months = resp.qa_salary_after_6_months;\r",
									"\r",
									"pm.test(\"Check all salary in response after multiplying by the coefficient\", function (){\r",
									"    pm.expect(resp_1_5_year).to.eql(req_salary*4),\r",
									"    pm.expect(resp_12_months).to.eql(req_salary*2.9),\r",
									"    pm.expect(resp_6_months).to.eql(req_salary*2)\r",
									"\r",
									"});\r",
									"\r",
									"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"pm.environment.set(\"salary_only_for_/get_test_user\", resp_1_5_year )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\" : 18,\r\n    \"name\" : \"Ivan\",\r\n    \"salary\" : 800,\r\n    \"auth_token\" : \"{{token}}\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/user_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"\r",
									"//Спарсить salary_request\r",
									"var req = request.data;\r",
									"var req_salary = req.salary;\r",
									"//Спарсить salary_response\r",
									"var resp = pm.response.json();\r",
									"\r",
									"var resp_salary_0 = resp.salary[0];\r",
									"var resp_salary_1 = resp.salary[1];\r",
									"var resp_salary_2 = resp.salary[2];\r",
									"\r",
									"pm.test(\"Check all salary in response after multiplying by the coefficient\", function(){\r",
									"    pm.expect(resp_salary_0).to.eql(+req_salary),\r",
									"    pm.expect(+resp_salary_1).to.eql(req_salary*2),\r",
									"    pm.expect(+resp_salary_2).to.eql(req_salary*3)\r",
									"});\r",
									"\r",
									"//4. Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"\r",
									"pm.test(\"Comparison salary\", function(){\r",
									"    if (resp_salary_2 > resp_salary_1 &&  resp_salary_2 > resp_salary_0){\r",
									"        pm.expect(true)\r",
									"        console.log(\"Comparison_salary_TRUE\")\r",
									"        } else {  \r",
									"        pm.expect(fail)\r",
									"        console.log(\"Comparison_salary_FALSE\")}\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "600",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Olga",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/new_data",
							"host": [
								"{{url}}"
							],
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"}\r",
									"pm.test ('Schema is valid', function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									" var req = request.data;\r",
									" var req_w = req.weight;\r",
									"\r",
									" var resp = pm.response.json();\r",
									" var resp_df = resp.daily_food;\r",
									" var resp_ds = resp.daily_sleep;\r",
									"\r",
									" pm.test(\"Check weight in response after multiplying by the coefficient\", function () {\r",
									"     pm.expect(resp_df).to.eql(req_w*0.012),\r",
									"     pm.expect(resp_ds).to.eql(req_w*2.5)\r",
									" });\r",
									" \r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "30",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "75",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Nikita",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/test_pet_info",
							"host": [
								"{{url}}"
							],
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2. Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// 3. Проверить что занчение поля name = значению переменной name из окружения\r",
									"var resp = pm.response.json();\r",
									"var resp_name = resp.name;\r",
									"var name_env = pm.environment.get(\"name\");\r",
									"\r",
									"// 1й вариант проверки\r",
									"pm.test (\"Name from response is equal to name from environment\", function () {\r",
									"    if (resp_name == name_env) {\r",
									"        pm.expect(true)\r",
									"        console.log(\"resp_name = name_env_TRUE\")\r",
									"    } else {\r",
									"        pm.expect(fail)\r",
									"        console.log(\"resp_name = name_env_FALSE\")\r",
									"    }\r",
									"});\r",
									"// 2й вариант проверки\r",
									"pm.test( \"Name from response is equal to name from environment (2)\", function () {\r",
									"    pm.expect (name_env).to.eql(resp_name)\r",
									"});\r",
									"\r",
									"// 4. Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"var req = request.data;\r",
									"var req_age = req.age;\r",
									"var resp_age = resp.age;\r",
									"\r",
									"// 1й вариант проверки\r",
									"pm.test( \"Age from response is equal to age from request\", function () {\r",
									"    pm.expect (req_age).to.eql(resp_age)\r",
									"});\r",
									"// 2й вариант проверки\r",
									"pm.test (\"Age from response is equal to age from request (2)\", function () {\r",
									"    if (req_age == resp_age) {\r",
									"        pm.expect(true)\r",
									"        console.log(\"req_age = resp_age_TRUE\")\r",
									"    } else {\r",
									"        pm.expect(fail)\r",
									"        console.log(\"req_age = resp_age_FALSE\")\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "salary",
									"value": "{{salary_only_for_/get_test_user}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Olga",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "25",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/get_test_user",
							"host": [
								"{{url}}"
							],
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
									"\r",
									"var resp = pm.response.json();//спарсили response\r",
									"var randomIndex = Math.floor(Math.random() * resp.length);//получили рандомное число\r",
									"var item = resp[randomIndex];// получили рандомую валюту\r",
									"console.log(\"randomCurID =\", item.Cur_ID)\r",
									"\r",
									"pm.environment.set(\"random_Cur_ID\", item.Cur_ID);\r",
									"\r",
									"\r",
									"// =====================================================================\r",
									"\r",
									"// 1. Получить список валют\r",
									"\r",
									"var curList = [];\r",
									"for (var i of resp) {\r",
									"    curList.push(i.Cur_Name);\r",
									"}\r",
									"console.log('curList', curList);\r",
									"\r",
									"// 2. Итерировать список валют\r",
									"// 3. В каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
									"async function fetchData() {\r",
									"    for (let i = 0; i < curList.length; i++) {\r",
									"        console.log(\"iter =\", i, \"curName =\", curList[i]);\r",
									"\r",
									"        const response = await new Promise((resolve, reject) => {\r",
									"            let auth_token = pm.environment.get(\"token\");\r",
									"            pm.sendRequest({\r",
									"                url: 'http://54.157.99.22:80/curr_byn',\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Content-Type': 'multipart/form-data',\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'formdata',\r",
									"                    formdata: [\r",
									"                        { key: \"auth_token\", value: auth_token },\r",
									"                        { key: \"curr_code\", value: JSON.stringify(i) }\r",
									"                    ]\r",
									"                }\r",
									"            }, function (err, response) {\r",
									"                if (err) {\r",
									"                    reject(err);\r",
									"                } else {\r",
									"                    resolve(response);\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"\r",
									"        const jsonResponse = response.json();\r",
									"        console.log('curOfficialRate = ', jsonResponse.Cur_OfficialRate);\r",
									"        // 4. Если возвращается 500 код, переходим к следующей итерации\r",
									"        if (response.code === 500) {\r",
									"            return;\r",
									"        }\r",
									"        // 5. Если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
									"        else if (response.code === 200) {\r",
									"            pm.test(\"Response have CurOfficialRate field\", function () {\r",
									"                pm.expect(jsonResponse).to.have.property(\"Cur_OfficialRate\");\r",
									"            });\r",
									"\r",
									"            // 6. Если поле есть, пишем в консоль информацию о валюте в виде объекта response\r",
									"            if (\"Cur_OfficialRate\" in jsonResponse) {\r",
									"                let respInfo = {\r",
									"                    \"Cur_Abbreviation\": jsonResponse.Cur_Abbreviation,\r",
									"                    \"Cur_ID\": jsonResponse.Cur_ID,\r",
									"                    \"Cur_Name\": jsonResponse.Cur_Name,\r",
									"                    \"Cur_OfficialRate\": jsonResponse.Cur_OfficialRate,\r",
									"                    \"Cur_Scale\": jsonResponse.Cur_Scale,\r",
									"                    \"Date\": jsonResponse.Date\r",
									"                };\r",
									"\r",
									"                console.log('info', respInfo);\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"}\r",
									"fetchData();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{random_Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}